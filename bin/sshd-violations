#!/usr/bin/env python
"""
Parse auth.log to retrieve invalid login attempts to SSH
"""

import argparse

from systematic.shell import Script, ScriptCommand, ScriptError
from systematic.log import LogFile, LogFileError

DEFAULT_LOGFILE = '/var/log/auth.log'

class SSHLoginsCommand(ScriptCommand):
    pass

class ListCommand(SSHLoginsCommand):
    def run(self, args):

        unique_users = {}
        unique_ips = {}

        for path in args.files:
            logfile = LogFile(path)
            logfile.reload()

            for entry in logfile.match_message('^Invalid user (?P<user>[^\s]+) from (?P<address>.*)'):

                if entry['user'] not in unique_users:
                    unique_users[entry['user']] = []

                unique_users[entry['user']].append(entry['address'])

                if entry['address'] not in unique_ips:
                    unique_ips[entry['address']] = {}

                usermap = unique_ips[entry['address']]
                if entry['user'] not in usermap:
                    usermap[entry['user']] = 0
                usermap[entry['user']] += 1

        for ip in sorted(unique_ips.keys(), lambda b, a: cmp(
                                                reduce(lambda x,y: x+y, unique_ips[a].values()),
                                                reduce(lambda x,y: x+y, unique_ips[b].values()),
                                            )):

            names = unique_ips[ip]
            print '%-18s total %s attempts' % (ip, reduce(lambda x,y: x+y, names.values()))

            if args.verbose:
                for name in sorted(names.keys()):
                    print '%6d %s' % (names[name],name)

script = Script()

c = script.add_subcommand(ListCommand('list', 'List invalid logins'))
c.add_argument('-v', '--verbose', action='store_true', help='List all attempted users')
c.add_argument('files', nargs='*', help='Log file paths to process')

args = script.parse_args()
